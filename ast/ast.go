package ast

import (
	"bytes"
	"fmt"
	"github.com/GzArthur/interpreter/token"
	"strings"
)

// Node ast node, the difference between statement and expression is whether it produces value
type Node interface {
	// TokenLiteral return the lexical unit token's literal associated with the node
	TokenLiteral() string
	// PrintNode used to compare ast nodes or print ast nodes when debugging
	PrintNode() string
}

type Statement interface {
	Node
	statementNode()
}

type Expression interface {
	Node
	expressionNode()
}

// Program the program acts as the root node for all nodes generated by parsing
type Program struct {
	Statements []Statement
}

func (p *Program) TokenLiteral() string {
	if len(p.Statements) > 0 {
		return p.Statements[0].TokenLiteral()
	}
	return ""
}
func (p *Program) PrintNode() string {
	var out bytes.Buffer
	for _, statement := range p.Statements {
		out.WriteString(statement.PrintNode())
	}
	return out.String()
}

// Statement node type

type LetStatement struct {
	Token token.Token
	Name  *Identifier
	Value Expression
}

func (l *LetStatement) statementNode()       {}
func (l *LetStatement) TokenLiteral() string { return l.Token.Literal }
func (l *LetStatement) PrintNode() string {
	var out bytes.Buffer
	out.WriteString(l.TokenLiteral() + " " + l.Name.PrintNode() + " = ")
	if l.Value != nil {
		out.WriteString(l.Value.PrintNode())
	}
	out.WriteString(";")
	return out.String()
}

type ReturnStatement struct {
	Token       token.Token
	ReturnValue Expression
}

func (r *ReturnStatement) statementNode()       {}
func (r *ReturnStatement) TokenLiteral() string { return r.Token.Literal }
func (r *ReturnStatement) PrintNode() string {
	var out bytes.Buffer
	out.WriteString(r.TokenLiteral() + " ")
	if r.ReturnValue != nil {
		out.WriteString(r.ReturnValue.PrintNode())
	}
	out.WriteString(";")
	return out.String()
}

type BlockStatement struct {
	Token      token.Token // '{' lexical unit
	Statements []Statement
}

func (b *BlockStatement) statementNode()       {}
func (b *BlockStatement) TokenLiteral() string { return b.Token.Literal }
func (b *BlockStatement) PrintNode() string {
	var out bytes.Buffer
	for _, statement := range b.Statements {
		out.WriteString(statement.PrintNode())
	}
	return out.String()
}

type ExpressionStatement struct {
	Token      token.Token
	Expression Expression
}

func (e *ExpressionStatement) statementNode()       {}
func (e *ExpressionStatement) TokenLiteral() string { return e.Token.Literal }
func (e *ExpressionStatement) PrintNode() string {
	if e.Expression != nil {
		return e.Expression.PrintNode()
	}
	return ""
}

//  Expression Node type

type Boolean struct {
	Token token.Token
	Value bool
}

func (b *Boolean) expressionNode()      {}
func (b *Boolean) TokenLiteral() string { return b.Token.Literal }
func (b *Boolean) PrintNode() string    { return b.Token.Literal }

type Integer struct {
	Token token.Token
	Value int64
}

func (i *Integer) expressionNode()      {}
func (i *Integer) TokenLiteral() string { return i.Token.Literal }
func (i *Integer) PrintNode() string    { return i.Token.Literal }

type Identifier struct {
	Token token.Token
	Value string
}

func (i *Identifier) expressionNode()      {}
func (i *Identifier) TokenLiteral() string { return i.Token.Literal }
func (i *Identifier) PrintNode() string    { return i.Value }

type PrefixExpression struct {
	Token     token.Token
	Operator  string
	RightExpr Expression
}

func (p *PrefixExpression) expressionNode()      {}
func (p *PrefixExpression) TokenLiteral() string { return p.Token.Literal }
func (p *PrefixExpression) PrintNode() string {
	var out bytes.Buffer
	out.WriteString(fmt.Sprintf("(%s%s)", p.Operator, p.RightExpr.PrintNode()))
	return out.String()
}

type InfixExpression struct {
	Token     token.Token
	LeftExpr  Expression
	Operator  string
	RightExpr Expression
}

func (i *InfixExpression) expressionNode()      {}
func (i *InfixExpression) TokenLiteral() string { return i.Token.Literal }
func (i *InfixExpression) PrintNode() string {
	var out bytes.Buffer
	out.WriteString(fmt.Sprintf("(%s %s %s)", i.LeftExpr.PrintNode(), i.Operator, i.RightExpr.PrintNode()))
	return out.String()
}

type IfExpression struct {
	Token       token.Token // 'if' lexical unit
	Condition   Expression
	Consequence *BlockStatement
	Alternative *BlockStatement
}

func (i *IfExpression) expressionNode()      {}
func (i *IfExpression) TokenLiteral() string { return i.Token.Literal }
func (i *IfExpression) PrintNode() string {
	var out bytes.Buffer
	out.WriteString(fmt.Sprintf("if %s %s", i.Condition.PrintNode(), i.Consequence.PrintNode()))
	if i.Alternative != nil {
		out.WriteString(fmt.Sprintf("else %s", i.Alternative.PrintNode()))
	}
	return out.String()
}

type FunctionLiteral struct {
	Token      token.Token
	Parameters []*Identifier
	Body       *BlockStatement
}

func (f *FunctionLiteral) expressionNode()      {}
func (f *FunctionLiteral) TokenLiteral() string { return f.Token.Literal }
func (f *FunctionLiteral) PrintNode() string {
	var (
		out    bytes.Buffer
		params []string
	)
	for _, p := range f.Parameters {
		params = append(params, p.PrintNode())
	}
	out.WriteString(fmt.Sprintf("%s(%s) %s", f.TokenLiteral(), strings.Join(params, ", "), f.Body.PrintNode()))
	return out.String()
}

type CallExpression struct {
	Function  Expression  // identifier or function literal
	Token     token.Token // '(' lexical unit
	Arguments []Expression
}

func (c *CallExpression) expressionNode()      {}
func (c *CallExpression) TokenLiteral() string { return c.Token.Literal }
func (c *CallExpression) PrintNode() string {
	var (
		out  bytes.Buffer
		args []string
	)
	for _, arg := range c.Arguments {
		args = append(args, arg.PrintNode())
	}
	out.WriteString(fmt.Sprintf("%s(%s)", c.Function.PrintNode(), strings.Join(args, ", ")))
	return out.String()
}
